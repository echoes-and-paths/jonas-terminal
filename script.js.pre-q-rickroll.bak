    const volumeLevels = [0.2, 0.5, 0.9]; // Low, Medium, High
    const volumeNames = ["Low", "Medium", "High"];
    let currentVolumeIndex = 1; // Start at Medium
    const errorMessageEl = document.getElementById('errorMessage');
    const audio = document.getElementById('hevelAudio');
    const rickrollAudioEl = document.getElementById('rickrollAudio'); // New audio element
    const startup = document.getElementById('startup');
    const terminal = document.getElementById('terminal');
    const typed = document.getElementById('typed');
    const audioStatus = document.getElementById('audioStatus');
    const endPrompt = document.getElementById('endPrompt');

    const excerpts = [
      '"…they kept it quiet, buried under the first failures…"','"…I only remember the humming—then the static…"','"…we weren’t meant to hear this again…"','"…they called it recursion loss, whatever that means…"','"…he said the name before everything fell silent…"'
    ];
    const rickrollLyrics = [ // As defined in previous step
      "We're no strangers to love...",
      "You know the rules, and so do I...",
      "A full commitment's what I'm thinking of...",
      "You wouldn't get this from any other guy...",
      "I just wanna tell you how I'm feeling...",
      "Gotta make you understand...",
      "",
      "Never gonna give you up,",
      "Never gonna let you down,",
      "Never gonna run around and desert you.",
      "Never gonna make you cry,",
      "Never gonna say goodbye,",
      "Never gonna tell a lie and hurt you.",
      "",
      "We've known each other for so long...",
      "Your heart's been aching, but you're too shy to say it...",
      "Inside, we both know what's been going on...",
      "We know the game and we're gonna play it...",
      "",
      "And if you ask me how I'm feeling...",
      "Don't tell me you're too blind to see...",
      "",
      "Never gonna give you up,",
      "Never gonna let you down,",
      "Never gonna run around and desert you.",
      "Never gonna make you cry,",
      "Never gonna say goodbye,",
      "Never gonna tell a lie and hurt you."
    ];

    let inputBuffer = "";
    let playbackStarted = false;
    let rickrollPlaying = false; // New flag for Rickroll state
    let lyricInterval = null;    // Interval ID for lyrics display
    let currentLyricIndex = 0;   // To track current lyric line

    function updateExcerpts() {
      // If Rickroll is playing, don't update with normal excerpts
      if (rickrollPlaying) return;
      document.querySelectorAll(".excerpt").forEach(el => {
        el.textContent = "// transcribed excerpt: " + excerpts[Math.floor(Math.random() * excerpts.length)];
      });
    }

    function displayRickrollLyrics() {
      if (currentLyricIndex < rickrollLyrics.length) {
        document.querySelectorAll(".excerpt").forEach(el => {
          // For now, set all excerpts to the current lyric line.
          // Could be enhanced to show different lines or scroll.
          el.textContent = rickrollLyrics[currentLyricIndex];
        });
        currentLyricIndex++;
      } else {
        if (lyricInterval) clearInterval(lyricInterval);
        currentLyricIndex = 0;
        // Optionally clear excerpts or leave last lyric after song naturally ends
        // document.querySelectorAll(".excerpt").forEach(el => el.textContent = "");
      }
    }

    function formatTime(s) {
      const m = Math.floor(s / 60).toString().padStart(2, '0');
      const sec = Math.floor(s % 60).toString().padStart(2, '0');
      return `${m}:${sec}`;
    }

    function monitorAudio() {
      const duration = audio.duration || 200;
      const displayDuration = (audio.duration && isFinite(audio.duration) && audio.duration > 0) ? audio.duration : 200;
      const interval = setInterval(() => {
        if (audio.paused || audio.ended) { clearInterval(interval); return; }
        audioStatus.textContent = `-- time: ${formatTime(audio.currentTime)} / ${formatTime(displayDuration)}`;
      }, 1000);
    }

    function handlePlaybackEnd() {
      endPrompt.innerHTML = `>> end of audio signal<br/>play again? (y/n)`;
      document.addEventListener("keydown", function handler(e) {
        if (e.key === "y") {
          endPrompt.innerHTML = "";
          updateExcerpts();
          setInitialAudioSettings();
          audio.play();
          monitorAudio();
          document.removeEventListener("keydown", handler);
        } else if (e.key === "n") {
          endPrompt.innerHTML = `>> link closed.`;
          document.removeEventListener("keydown", handler);
        }
      });
    }

    function setInitialAudioSettings() {
      audio.volume = volumeLevels[currentVolumeIndex];
      // Set rickroll audio volume too, perhaps, or handle it when it plays
      if (rickrollAudioEl) rickrollAudioEl.volume = audio.volume;
    }

    function showCommands() {
      endPrompt.innerHTML += `<br/>> commands: p = pause/play, v = volume, q = quit`;
    }

    audio.addEventListener("ended", handlePlaybackEnd);
    // Rickroll audio end listener will be added in a later step.

    document.addEventListener("keydown", (e) => {
      if (rickrollPlaying) { // If Rickroll is active, only 'q' should work for now
        if (e.key === "q") {
          // Quit logic for Rickroll will be handled in next step
        }
        return; // Absorb other key presses during Rickroll
      }

      if (!playbackStarted) {
        if (e.key.length === 1 && /^[a-zA-Z0-9]$/.test(e.key)) {
          if(errorMessageEl) errorMessageEl.textContent = "";
          inputBuffer += e.key.toLowerCase();
          typed.textContent = inputBuffer;
        } else if (e.key === "Backspace") {
          if(errorMessageEl) errorMessageEl.textContent = "";
          inputBuffer = inputBuffer.slice(0, -1);
          typed.textContent = inputBuffer;
        } else if (e.key === "Enter") {
          if (inputBuffer === "admin") { // 'admin' command
            if (errorMessageEl) errorMessageEl.textContent = "";
            if (errorMessageEl) {
                errorMessageEl.style.color = "#FF5555";
                errorMessageEl.innerHTML = "> EXECUTING ADMIN OVERRIDE...<br/>> WARNING: UNSTABLE FRAGMENT DETECTED...";
            }
            setTimeout(() => {
                if (errorMessageEl) {
                    errorMessageEl.style.color = "#4AF626";
                    errorMessageEl.innerHTML = "> PLAYING RECOVERED AUDIO FRAGMENT...";
                }
                if (rickrollAudioEl) {
                    rickrollAudioEl.volume = audio.volume;
                    rickrollAudioEl.play();
                    rickrollPlaying = true;
                    currentLyricIndex = 0;
                    if (lyricInterval) clearInterval(lyricInterval);
                    lyricInterval = setInterval(displayRickrollLyrics, 3000);
                    displayRickrollLyrics();
                } else {
                    if(errorMessageEl) errorMessageEl.textContent = "> ERROR: Special audio module not found.";
                }
            }, 1500);
            inputBuffer = "";
            typed.textContent = "";
          } else if (inputBuffer === "list" || inputBuffer === "dir") {
            const listOutput = ["> ARCHIVE DIRECTORY LISTING:","  JONAS.HVL",""].join("<br/>");
            if(errorMessageEl) {
                errorMessageEl.style.color = "#4AF626";
                errorMessageEl.innerHTML = listOutput;
            }
            inputBuffer = "";
            typed.textContent = "";
          } else if (inputBuffer === "jonas") {
            if(errorMessageEl) errorMessageEl.textContent = "";
            startup.style.display = "none";
            terminal.style.display = "block";
            playbackStarted = true;
            updateExcerpts();
            setInitialAudioSettings();
            audio.play();
            monitorAudio();
            setInterval(updateExcerpts, 6000);
            showCommands();
          } else if (inputBuffer.length > 0) {
            if(errorMessageEl) {
                errorMessageEl.style.color = "#FF5555";
                errorMessageEl.textContent = "> ACCESS DENIED: Unknown archive.";
            }
            inputBuffer = "";
            typed.textContent = "";
          } else {
            if(errorMessageEl) errorMessageEl.textContent = "";
          }
        }
      } else { // playbackStarted is true (and rickrollPlaying is false)
        if (e.key === "p") {
          if (audio.paused) {
            audio.play();
            monitorAudio();
          } else {
            audio.pause();
          }
        }
        if (e.key === "v") {
          currentVolumeIndex = (currentVolumeIndex + 1) % volumeLevels.length;
          audio.volume = volumeLevels[currentVolumeIndex];
          if (rickrollAudioEl) rickrollAudioEl.volume = audio.volume; // Sync volume
          audioStatus.textContent = `-- volume: ${volumeNames[currentVolumeIndex]} (${(audio.volume * 100).toFixed(0)}%)`;
        }
        if (e.key === "q") {
          // This 'q' is for main audio; Rickroll 'q' handled above or next step
          audio.pause();
          audio.currentTime = 0;
          endPrompt.innerHTML = ">> playback terminated.";
        }
      }
    });
